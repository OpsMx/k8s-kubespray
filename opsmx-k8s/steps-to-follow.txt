Note: Primary requirements for setting up k8s multi-master multi-node/worker cluster with kubespray using Ansible scripts
1. Required hardware environment with ubuntu 18.04 LTS server
	1.1. Master Node : 4 CPU, 16 GB RAM, 20 GB HDD , Ubuntu 18.04 LTS Server - As required number -- or as mentioned in Pre-requisite.txt
	1.2. Worker Node : 8 CPU, 32 GB RAM, 30 GB HDD , Ubuntu 18.04 LTS Server - As required number -- or as mentioned in Pre-requisite.txt
	1.3. NFS/Launch/HAProxy : 2 CPU, 16 GB RAM, 40 GB HDD , Additional storage as per need (500 GB) Ubuntu 18.04 LTS Server - One No. -- or as mentioned in Pre-requisite.txt
2. Required Software/Applications in the Environment
	2.1 : NFS/Launch/HAProxy : Python(version 2.7.15), Python-pip, python-jinja2 and Ansible(version: 2.7.10), python-netaddr and virtualenv
	2.2 : nfs-comman, nfs-kernel-server, kubectl binary, helm v2.13.1 
3. Networking 
	3.1 : All nodes in same network, prefered static IP.
	3.2 : Public IP for HA and Proxy
	3.3 : FQDN and DNS configurations

Steps to configure K8s-Cluster using Ansible Scripts and Kubespray

Step#1: creating passwordless set up
login to a secific user and generate ssh public keys
	$ ssh-keygen -t rsa
	$ cat /home/<user>/.ssh/id_rsa.pub
login to a 'root' user and generate ssh public keys
	$ ssh-keygen -t rsa
	$ cat /root/.ssh/id_rsa.pub	
List out the above generated keys and note down to a file.
Copy the public-key(generated above) into all the machines 
	$ vi .ssh/authorized_keys
	$ vi /root/.ssh/authorized_keys
Test the connectvity among the machines.
	$ ssh -A IPs ( all private IPs, or with hostnames)
In all machines of /etc/hosts update all master and cluster nodes hostnames with IPs
In all machines update /etc/hostname file with its Fully Qualified Domain Name ( like kubemaster1.opsmx.com)
In all machines update /etc/resolv.conf with its DNS server address. ( nameserver < DNS server IP >, search < your domain name > )

Step2: Execute kubesprayenv.sh script in launch machine then check setting into virtualenv for ansible setup
Source: https://github.com/OpsMx/k8s-kubespray/blob/master/opsmx-k8s/kubesprayenv.sh
	$ virtualenv ~/ansible
	$ . ~/ansible/bin/activate
	>>>>(ansible) opsmxgcetest@cisco-kubemhanfs:
		
Step3: Install ansible 2.7.10 using pip in virtual environment
	$ sudo pip install ansible==2.7.10
	$ which ansible
	$ export PATH=$PATH:/usr/local/bin/ansible
	
Step4: Update /etc/ansible/hosts file ref: sample_etc_hosts
Source: https://github.com/OpsMx/k8s-kubespray/blob/master/opsmx-k8s/opsmx-spinnaker/sample_etc_hosts
	   Check all the machines connectivity using ansible ping
	$ ansible -m ping all -- Or can perform it with individual nodes
	
Step5: Follow configuration of all the files as below
File1:
Edit the below file: ( Should look like the below )
	k8s-kubespray/kubespray-install/default/group_vars/all/all.yml
	### Update Master & Load Balance IPs with the below keys array:
	### supplementary_addresses_in_ssl_keys		//Public and Private IPs
	ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
	kubeconfig_localhost: true
	supplementary_addresses_in_ssl_keys: [masternode1_ip masternode2_privateIP masternode3_privateIP]
	
	cloud_provider: gce
	etcd_data_dir: /var/lib/etcd
	bin_dir: /usr/local/bin
	
	loadbalancer_apiserver_localhost: true
	nginx_kube_apiserver_port: 6443
	

	loadbalancer_apiserver_localhost: true
	upstream_dns_servers:
	 - 8.8.8.8
	cert_management: scrip
	kube_read_only_port: 10255

File2:
Configure 'Enable Ingress Controller Deployment'
Verify the below things in k8s-kubespray/kubespray-install/default/group_vars/k8s-cluster/addons.yml
	# Nginx ingress controller deployment
	ingress_nginx_enabled: true
	ingress_nginx_host_network: false
	ingress_nginx_nodeselector:
	  node-role.kubernetes.io/node: ""
	
For addition, enabling 'helm'.
	helm_enabled: true
	helm_version: v2.13.1

File3:	
edit 'k8s-kubespray/kubespray/roles/kubernetes-apps/ingress-controller/ingress-nginx/templates/svc-default-backend.yml.j2' and ensure the below:
	labels:
		app.kubernetes.io/name: ingress-nginx
		app.kubernetes.io/part-of: ingress-nginx
	spec:
	  type: NodePort
	  ports:
		- port: 80
		  targetPort: 80
	  selector:
		app.kubernetes.io/name: ingress-nginx
		app.kubernetes.io/part-of: ingress-nginx

File4:
Ensure the below lines in 'k8s-kubespray/kubespray-install/default/group_vars/k8s-cluster/k8s-cluster.yml'
	kube_oidc_auth: true
	kube_oidc_url: https://dex.k8s.example.com:32000
	kube_oidc_client_id: loginapp
	kube_oidc_ca_file: "{{ kube_cert_dir }}/ca.pem"
	kube_oidc_username_claim: name
	kube_oidc_groups_claim: groups
	manual_dns_server: 1.1.1.1
	### Provide API server IPs with Pubic-IPs
	kube_apiserver_ip: Public IPs of launch and all kube systems IP ( 35.234.23.5 )

Step6: Execute Kubespraydeployment-auto.sh script and wait for completion
Source: https://github.com/OpsMx/k8s-kubespray/blob/master/opsmx-k8s/kubespraydeplyment-auto.sh
		
Step7: Execute nfs-auto.sh script and wait for completion
https://github.com/OpsMx/k8s-kubespray/blob/master/opsmx-k8s/nfs-auto.sh
	$ bash nfs-auto.sh

Step8: Execute efk-installer.sh script and wait for completion
Source: https://github.com/OpsMx/k8s-kubespray/blob/master/kubespray-install/efk/efk-installer.sh
	$ bash efk-installer.sh

Step9: For Prometheous installtion follow the steps 
Source: https://github.com/OpsMx/k8s-kubespray/tree/master/kubespray-install/Prometheus/prometheus-setup
Scripts:
	1. prometheus-auto.sh (Executable file)
	2. clusterRole.yml
	3. config-map.yml
	4. prometheus-deployment.yml
	5. prometheus-service.yml
Note: 
	1. Update master and minion node IPs and their usernames in 'prometheus-auto.sh'.
	2. Update 'config-map.yml' with the below entry:
		- job_name: 'node1'
		  static_configs:
			- targets: ['x.x.x.x:9100'] -- update x.x.x.x with cluster private IPs
Command:
	$ bash prometheus-auto.sh

Step10: Node-Exporter for infrastrucure metrics
Source: https://github.com/OpsMx/k8s-kubespray/tree/master/kubespray-install/Prometheus/prometheus-setup
Scripts:
	1. node-exporter.yaml (Executable file)
	2. k8s-hosts
	2. node_exporter.service.j2
Note: 
	1. Ensure the inventory file 'k8s-hosts' with the hostnames of master and minion nodes.
Command:
	$ ansible-playbook -i k8s-hosts node-exporter.yaml
	
Step11: Grafana
Source: https://github.com/OpsMx/k8s-kubespray/tree/master/kubespray-install/Grafana/grafana-setup
Scripts:
	1. grafana-auto.sh (Executable file)
	2. grafana-deployment.yml
	3. grafana-service.yml
Command: 
	$ bash grafana-auto.sh
	
Step12: Follow spinnaker installation step and script
Source: https://github.com/OpsMx/k8s-kubespray/tree/master/opsmx-k8s/opsmx-spinnaker 

Step13: Verify and Confirm status
